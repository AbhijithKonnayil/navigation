# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  lane :test do
    # Run your Flutter tests
    sh("flutter test")
  end

  desc "Build"
  lane :buildApk do |options|
    flavor = options[:flavor]
    type=options[:type]
    version_name=options[:version_name]
    buildNumber=options[:version_code]
    enc_prod_key=options[:enc_prod_key]
    enc_default_key=options[:enc_default_key]
    puts "enc key in build"
    puts enc_default_key
    puts enc_prod_key
    versionname_agrs_sh=""
    versioncode_args_sh=""
    if(version_name!="")
      versionname_agrs_sh="--build-name=#{version_name}"
    end
    if(buildNumber!="")
      versioncode_args_sh= "--build-number=#{buildNumber}"
    end
    puts versionname_agrs_sh
    puts versioncode_args_sh
    Dir.chdir '../..' do
      sh("flutter","build","apk","--flavor",flavor,"-t" ,"lib/mains/main_global_prod.dart","--#{type}",versionname_agrs_sh,versioncode_args_sh)
    end
  end

  desc "Increment Version"
  lane :increment_version_firebase do
      latest_release = firebase_app_distribution_get_latest_release(
        app: "1:337613462775:android:a0562f974110a561b907f2",)
      flutter_versioner(
      pubspec_file_path:"../pubspec.yaml",  
      version_component:"version_code", 
      value:latest_release[:buildVersion].to_i + 1 
      )
  end


  desc "Publish App to Firebase"
  lane :publishBuildTest do |options|
    #set Variables
    flavor = options[:flavor]
    type = options[:type]
    release_notes_body = options[:release_notes]
    apk_file_path= getApkFilePath(flavor,type)
    release_notes = getReleaseNotes(flavor,type,release_notes_body)
    version_name=options[:version_name ]
    version_code=options[:version_code ]
    enc_prod_key=options[:enc_prod_key]
    enc_default_key=options[:enc_default_key]
    
    puts flavor
    puts type
    puts version_code
    puts version_name
    puts release_notes
    puts "universal build :#{options[:is_univeral_build]}"
    puts "pre prod build :#{options[:is_preprod_build]}"
    puts "pre secure build :#{options[:is_secure_build]}"
  end

  desc "Publish App to Firebase"
  lane :publishBuild do |options|
    #set Variables
    flavor = options[:flavor]
    type = options[:type]
    release_notes_body = options[:release_notes]
    apk_file_path= getApkFilePath(flavor,type)
    release_notes = getReleaseNotes(flavor,type,release_notes_body)
    version_name=options[:version_name ]
    version_code=options[:version_code ]
    enc_prod_key=options[:enc_prod_key]
    enc_default_key=options[:enc_default_key]
    puts "enc key"
    puts enc_default_key
    puts enc_prod_key
    #End of variables
    increment_version_firebase
    buildApk(flavor:flavor,
            type:type,
            version_name:version_name,
            version_code:version_code,
            enc_default_key:enc_default_key,
            enc_prod_key:enc_prod_key
            )
    firebase_app_distribution(
      app: "1:337613462775:android:a0562f974110a561b907f2",
      groups: "group-one",
      release_notes: release_notes ,
      android_artifact_type: "APK",
      apk_path: apk_file_path,
    )
  end


  desc 'Send notification to Mattermost'
  lane :send_update_to_mattermost do |options|
    # set Variables
    #<version_name> 
    #<build number>
    #<flavour>
    #<type>
    #<branch>
    #<release notes>

    flavor = options[:flavor]
    type = options[:type]
    release_notes_body = options[:release_notes]
    version = "#{options[:version_name]} (#{options[:version_code]})"
    branch = options[:branch]
    msg_text = "CI CD TEST\nVersion : #{version}\nFlavor:#{flavor}\nType:#{type}\nBranch:#{branch}\nRelease notes:#{release_notes_body}"
    # End of variables
    hook_url = ""
    data = {"text":msg_text}.to_json
    headers = [
      "-H 'Content-Type: application/json'"
    ]
    
    puts "msg_text"
    puts msg_text
    self.get_props_from_apk("VersionName","prodGlobal","release")
  end

  def get_props_from_apk(version_component,flavor,type)
    build_tool_version='34.0.0'
    android_home = ENV['ANDROID_HOME']
    aapt_cmd="#{android_home}/build-tools/#{build_tool_version}/aapt"
    apk_file_path = getApkFilePath(flavor,type)
    puts apk_file_path
    #command = "#{AAPT_CMD} dump badging #{apk_file_path} | grep #{version_component} | awk -F \"#{version_component}='\" '{print $2}' | awk -F \"'\" '{print $1}'"
    command = "#{aapt_cmd} dump badging #{apk_file_path} | grep \"versionCode\" | awk -F \"versionCode='\" '{print $2}' | awk -F \"'\" '{print $1}'"
    sh("pwd")
    sh("ls")
    sh("ls", "../build/app/outputs/flutter-apk/")
    sh(command)
    #./aapt dump badging ~/projects/shop_app/build/app/outputs/flutter-apk/app-stgglobal-debug.apk | grep "versionCode" | awk -F "versionCode='" '{print $2}' | awk -F "'" '{print $1}'
  end

  def splitFlavor(flavor)
    matches = flavor.split /(?=[A-Z])/
  	country=matches[1].downcase
    environment=matches[0]
    return [country,environment]
  end

  def getApkFilePath(flavor,type)
    country, environment = splitFlavor(flavor)
    return  "../build/app/outputs/flutter-apk/app-#{environment}#{country}-#{type}.apk"
    #return "../build/app/outputs/apk/#{flavor}/#{type}/app-#{environment}-#{country}-#{type}.apk"
  end

  def getReleaseNotes(flavor,type,release_notes_body)
    return "Flavor : #{flavor} | Type : #{type}\n#{release_notes_body}"
  end
end

