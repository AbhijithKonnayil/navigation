name: TAG
on:
  push:
    tags:
      - 'AOS-v*'
  workflow_dispatch:
    inputs:
      is_universal:
        description: 'Universal Build'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      is_preprod:
        description: 'Pre Prod Build'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      is_secure:
        description: 'Secure'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      country:
        description: 'Country'     
        required: true
        default: 'Global'
        type: choice
        options:
          - Global
          - India
          - China
          - Brazil
      env:
        description: 'Env'     
        required: true
        default: 'stg'
        type: choice
        options:
          - dev
          - stg
          - prod
      type:
        description: 'Build Type - release/debug'     
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      release_notes:
        description: 'Release Notes'
        required: true
      version_name:
        description: 'Version Name (major.minor.patch) [refer firebase] '
        required: true
      version_code:
        description: 'Version Code [refer firebase]'
        required: true 
jobs:
  pre_build:
    runs-on: macos-latest
    steps:
      - run: |
          echo "TAG CREATION"
      - name: Set env
        if: github.event_name == 'push'
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          REGEX="^AOS-v[0-9]+\.[0-9]+\.[0-9]+\+[0-9]+-(stg|prod|dev)-(global|india|brazil|china)-(release|debug)(--(universal|preprod|secure)(-(universal|preprod|secure)){0,2})?$"

          # Check if the TAG_NAME matches the regex
          if [[ $TAG_NAME =~ $REGEX ]]; then
              echo "Tag format is valid: $TAG_NAME"
          else
              echo "INVALID TAG FORMAT"
              exit 1 # Exit with error code 1 to stop the workflow if format is invalid
          fi


          # Extract the required parts
          VERSION_NAME=$(echo $TAG_NAME | cut -d'+' -f1 | cut -d'v' -f2)
          VERSION_CODE=$(echo $TAG_NAME | cut -d'+' -f2 | cut -d'-' -f1)
          ENV=$(echo $TAG_NAME | cut -d'-' -f3)
          COUNTRY=$(echo $TAG_NAME | cut -d'-' -f4)
          TYPE=$(echo $TAG_NAME | cut -d'-' -f5)
          OPTIONAL_STR=$(echo $TAG_NAME | awk -F'--' '{print $2}')
          IFS='-' read -r -a OPTIONAL_ARRAY <<< "$OPTIONAL_STR"
          OPTIONAL_PRINT_OUT=$(printf "%s\n" "${OPTIONAL_ARRAY[@]}")
          IS_UNIVERSAL_BUILD="false"
          IS_PRE_PROD_BUILD="false"
          IS_SECURE_BUILD="false"

          #TAG_MESSAGE=$(git for-each-ref refs/tags/$TAG_NAME --format="%(contents)")

          if echo "$OPTIONAL_PRINT_OUT" | grep -q "universal"; then
              IS_UNIVERSAL_BUILD="true"
          fi

          if echo "$OPTIONAL_PRINT_OUT" | grep -q "preprod"; then
              IS_PRE_PROD_BUILD="true"
          fi

          if echo "$OPTIONAL_PRINT_OUT" | grep -q "secure"; then
              IS_SECURE_BUILD="true"
          fi

          # Set outputs for use in other steps
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "COUNTRY=$COUNTRY" >> $GITHUB_ENV
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          echo "IS_UNIVERSAL_BUILD=$IS_UNIVERSAL_BUILD" >> $GITHUB_ENV
          echo "IS_PRE_PROD_BUILD=$IS_PRE_PROD_BUILD" >> $GITHUB_ENV
          echo "IS_SECURE_BUILD=$IS_SECURE_BUILD" >> $GITHUB_ENV
          #echo "Tag Message: $TAG_MESSAGE"
          echo $VERSION_NAME
          echo "MY_VARIABLE=my_value" >> $GITHUB_ENV
          echo "::set-output name=flavor::$VERSION_NAME"
      - name: Set color
        id: color-selector
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
      
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
        run: echo "The selected color is $SELECTED_COLOR"

      - name: Use extracted values
        run: |
          echo "${{ env.MY_VARIABLE }}"
          echo "Using FLAVOR: ${{ needs.pre_build.outputs.flavor }}"
          echo "${{ steps.step1.outputs.my_output }}"
          echo "${{env}}"
          echo "${{ env.VERSION_NAME }}"
          VERSION_NAME="${VERSION_NAME:-${{ github.event.inputs.version_name }}}"
          VERSION_CODE="${VERSION_CODE:-${{ github.event.inputs.version_code }}}"
          RELEASE_NOTES="${RELEASE_NOTES:-${{ github.event.inputs.release_notes }}}"
          ENV="${ENV:-${{ github.event.inputs.env}}}"
          COUNTRY="${COUNTRY:-${{ github.event.inputs.country }}}"
          TYPE="${TYPE:-${{ github.event.inputs.type}}}"
          IS_UNIVERSAL_BUILD="${IS_UNIVERSAL_BUILD:-${{ github.event.inputs.is_universal}}}"
          IS_SECURE_BUILD="${IS_SECURE_BUILD:-${{ github.event.inputs.is_secure}}}"
          IS_PRE_PROD_BUILD="${IS_PRE_PROD_BUILD:-${{ github.event.inputs.is_preprod}}}"
          
          COUNTRY_SENTANCE_CASE="$(echo "${COUNTRY:0:1}" | tr '[:lower:]' '[:upper:]')$(echo "${COUNTRY:1}" | tr '[:upper:]' '[:lower:]')"
          FLAVOR="${ENV}${COUNTRY_SENTANCE_CASE}"

          cd android
          echo "fastlane publishBuildTest flavor:$FLAVOR release_notes:$RELEASE_NOTES type:$TYPE version_name:$VERSION_NAME version_code:$VERSION_CODE is_univeral_build:$IS_UNIVERSAL_BUILD is_preprod_build:$IS_PRE_PROD_BUILD is_secure_build:$IS_SECURE_BUILD"
          fastlane publishBuildTest flavor:$FLAVOR release_notes:"$RELEASE_NOTES" type:$TYPE version_name:$VERSION_NAME version_code:$VERSION_CODE is_univeral_build:$IS_UNIVERSAL_BUILD is_preprod_build:$IS_PRE_PROD_BUILD is_secure_build:$IS_SECURE_BUILD