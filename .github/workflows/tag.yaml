name: TAG
on:
  push:
    tags:
      - 'AOS-v*'
  workflow_dispatch:
    inputs:
      country:
        description: 'Country'     
        required: true
        default: 'Global'
        type: choice
        options:
          - Global
          - India
          - China
          - Brazil
      env:
        description: 'Env'     
        required: true
        default: 'stg'
        type: choice
        options:
          - dev
          - stg
          - prod
      type:
        description: 'Build Type - release/debug'     
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      release_notes:
        description: 'Release Notes'
        required: true
      version_name:
        description: 'Version Name (major.minor.patch) [refer firebase] '
        required: true
      version_code:
        description: 'Version Code [refer firebase]'
        required: true
      is_universal:
        description: 'Universal Build'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      is_preprod:
        description: 'Pre Prod Build'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      is_secure:
        description: 'Secure'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      
jobs:
  pre_build:
    runs-on: macos-latest
    outputs:
      MODE: ${{ steps.set_output.outputs.MODE }}
      TAG_NAME: ${{ steps.set_output.outputs.TAG_NAME }}
      VERSION_NAME: ${{ steps.set_output.outputs.VERSION_NAME }}
      VERSION_CODE: ${{ steps.set_output.outputs.VERSION_CODE }}
      RELEASE_NOTES: ${{ steps.set_output.outputs.RELEASE_NOTES}}
      ENV: ${{ steps.set_output.outputs.ENV}}
      COUNTRY: ${{ steps.set_output.outputs.COUNTRY}}
      TYPE: ${{ steps.set_output.outputs.TYPE}}
      IS_UNIVERSAL_BUILD: ${{ steps.set_output.outputs.IS_UNIVERSAL_BUILD}}
      IS_SECURE_BUILD: ${{ steps.set_output.outputs.IS_SECURE_BUILD}}
      IS_PRE_PROD_BUILD: ${{ steps.set_output.outputs.IS_PRE_PROD_BUILD}}

    steps:
      - run: |
          echo "TAG CREATION"
      - name: Set env
        id: set_output
        if: github.event_name == 'push'
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          REGEX="^AOS-v[0-9]+\.[0-9]+\.[0-9]+\+[0-9]+-(stg|prod|dev)-(global|india|brazil|china)-(release|debug)(--(universal|preprod|secure)(-(universal|preprod|secure)){0,2})?$"

          # Check if the TAG_NAME matches the regex
          if [[ $TAG_NAME =~ $REGEX ]]; then
              echo "Tag format is valid: $TAG_NAME"
          else
              echo "INVALID TAG FORMAT"
              exit 1 # Exit with error code 1 to stop the workflow if format is invalid
          fi


          # Extract the required parts
          VERSION_NAME=$(echo $TAG_NAME | cut -d'+' -f1 | cut -d'v' -f2)
          VERSION_CODE=$(echo $TAG_NAME | cut -d'+' -f2 | cut -d'-' -f1)
          ENV=$(echo $TAG_NAME | cut -d'-' -f3)
          COUNTRY=$(echo $TAG_NAME | cut -d'-' -f4)
          TYPE=$(echo $TAG_NAME | cut -d'-' -f5)
          OPTIONAL_STR=$(echo $TAG_NAME | awk -F'--' '{print $2}')
          IFS='-' read -r -a OPTIONAL_ARRAY <<< "$OPTIONAL_STR"
          OPTIONAL_PRINT_OUT=$(printf "%s\n" "${OPTIONAL_ARRAY[@]}")
          IS_UNIVERSAL_BUILD="false"
          IS_PRE_PROD_BUILD="false"
          IS_SECURE_BUILD="false"


          if echo "$OPTIONAL_PRINT_OUT" | grep -q "universal"; then
              IS_UNIVERSAL_BUILD="true"
          fi

          if echo "$OPTIONAL_PRINT_OUT" | grep -q "preprod"; then
              IS_PRE_PROD_BUILD="true"
          fi

          if echo "$OPTIONAL_PRINT_OUT" | grep -q "secure"; then
              IS_SECURE_BUILD="true"
          fi

          echo "MODE=TAG" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "ENV=$ENV" >> $GITHUB_OUTPUT
          echo "COUNTRY=$COUNTRY" >> $GITHUB_OUTPUT
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "IS_UNIVERSAL_BUILD=$IS_UNIVERSAL_BUILD" >> $GITHUB_OUTPUT
          echo "IS_SECURE_BUILD=$IS_SECURE_BUILD" >> $GITHUB_OUTPUT
          echo "IS_PRE_PROD_BUILD=$IS_PRE_PROD_BUILD" >> $GITHUB_OUTPUT
          
  build:
    runs-on: macos-latest
    needs: pre_build
    steps:
      - uses: actions/checkout@v2
      - name: Use extracted values
        run: |
          MODE="${{ needs.pre_build.outputs.MODE }}"
          echo "MODE"
          echo $MODE
          if [ "$MODE" = 'TAG' ]; then
              #TAG_NAME="${{ needs.pre_build.outputs.TAG_NAME }}"
              echo  "TAG_NAME="${{ needs.pre_build.outputs.TAG_NAME }}"" >> "$GITHUB_ENV"
              echo  "VERSION_NAME="${{ needs.pre_build.outputs.VERSION_NAME }}"" >> "$GITHUB_ENV"
              VERSION_CODE="${{ needs.pre_build.outputs.VERSION_CODE }}"
              RELEASE_NOTES="${{ needs.pre_build.outputs.RELEASE_NOTES }}"
              ENV="${{ needs.pre_build.outputs.ENV }}"
              COUNTRY="${{ needs.pre_build.outputs.COUNTRY }}"
              TYPE="${{ needs.pre_build.outputs.TYPE }}"
              IS_UNIVERSAL_BUILD="${{ needs.pre_build.outputs.IS_UNIVERSAL_BUILD }}"
              IS_SECURE_BUILD="${{ needs.pre_build.outputs.IS_SECURE_BUILD }}"
              IS_PRE_PROD_BUILD="${{ needs.pre_build.outputs.IS_PRE_PROD_BUILD }}"

              git fetch --depth=1 origin +refs/tags/$TAG_NAME:refs/tags/$TAG_NAME
              RELEASE_NOTES=$(git tag -l --format='%(contents:subject)' ${GITHUB_REF#refs/*/})

              echo "RELEASE_NOTES=$RELEASE_NOTES" >> "$GITHUB_ENV"
          else
              VERSION_NAME="${{ github.event.inputs.version_name }}"
              VERSION_CODE="${{ github.event.inputs.version_code }}"
              RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
              ENV="${{ github.event.inputs.env }}"
              COUNTRY="${{ github.event.inputs.country }}"
              TYPE="${{ github.event.inputs.type }}"
              IS_UNIVERSAL_BUILD="${{ github.event.inputs.is_universal }}"
              IS_SECURE_BUILD="${{ github.event.inputs.is_secure }}"
              IS_PRE_PROD_BUILD="${{ github.event.inputs.is_preprod }}"
          fi

          COUNTRY_SENTANCE_CASE="$(echo "${COUNTRY:0:1}" | tr '[:lower:]' '[:upper:]')$(echo "${COUNTRY:1}" | tr '[:upper:]' '[:lower:]')"
          FLAVOR="${ENV}${COUNTRY_SENTANCE_CASE}"

          echo "fastlane publishBuildTest flavor:$FLAVOR release_notes:$RELEASE_NOTES type:$TYPE version_name:$VERSION_NAME version_code:$VERSION_CODE is_univeral_build:$IS_UNIVERSAL_BUILD is_preprod_build:$IS_PRE_PROD_BUILD is_secure_build:$IS_SECURE_BUILD"
          cd android
          echo "fastlane publishBuildTest flavor:$FLAVOR release_notes:$RELEASE_NOTES type:$TYPE version_name:$VERSION_NAME version_code:$VERSION_CODE is_univeral_build:$IS_UNIVERSAL_BUILD is_preprod_build:$IS_PRE_PROD_BUILD is_secure_build:$IS_SECURE_BUILD"
          fastlane publishBuildTest flavor:$FLAVOR release_notes:"$RELEASE_NOTES" type:$TYPE version_name:$VERSION_NAME version_code:$VERSION_CODE is_univeral_build:$IS_UNIVERSAL_BUILD is_preprod_build:$IS_PRE_PROD_BUILD is_secure_build:$IS_SECURE_BUILD
      - name: REPEAT USING
        run: |
          echo "fastlane publishBuildTest flavor:$FLAVOR release_notes:$RELEASE_NOTES type:$TYPE version_name:$VERSION_NAME version_code:$VERSION_CODE is_univeral_build:$IS_UNIVERSAL_BUILD is_preprod_build:$IS_PRE_PROD_BUILD is_secure_build:$IS_SECURE_BUILD"